{"version":3,"file":"static/js/295.566958cd.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/RegisterPage/registerPage.module.css?4c7c","webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/registerForm.module.css?0fd0","components/RegisterForm/initialState.js","components/RegisterForm/fields.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","webpack://goit-react-hw-08-phonebook/./src/shared/Button/button.module.css?ed75","shared/Button/Button.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://goit-react-hw-08-phonebook/./src/shared/TextField/textField.module.css?b02a","shared/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js","shared/hooks/useForm.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"registerPage_container__w19Vr\",\"title\":\"registerPage_title__XEc6N\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"registerForm_container__qLLdt\"};","export const initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\"\n}","export const fields = {\n    name: {\n        type: \"text\",\n        name: \"name\",\n        required: true,\n        label: \"Name\",\n        placeholder: \"Enter name\"\n    },\n    email: {\n        type: \"email\",\n        name: \"email\",\n        required: true,\n        label: \"Email\",\n        placeholder: \"Enter email\"\n    },\n    password: {\n        type: \"password\",\n        name: \"password\",\n        required: true,\n        label: \"Password\",\n        placeholder: \"Enter password\"\n    }\n\n}","import PropTypes from 'prop-types';\nimport css from '../RegisterForm/registerForm.module.css';\nimport { useForm } from '../../shared/hooks/useForm';\nimport { initialState } from './initialState';\nimport { TextField } from 'shared/TextField/TextField';\nimport { fields } from './fields';\nimport { Button } from '../../shared/Button/Button';\n\nexport const RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { name, email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit} className={css.container}>\n      <TextField value={name} handleChange={handleChange} {...fields.name} />\n      <TextField value={email} handleChange={handleChange} {...fields.email} />\n      <TextField\n        value={password}\n        handleChange={handleChange}\n        {...fields.password}\n      />\n      <Button>Register</Button>\n    </form>\n  );\n};\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import css from \"../RegisterPage/registerPage.module.css\"\nimport { useDispatch } from \"react-redux\";\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { registration } from \"../../redux/auth/auth-operations\";\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSignup = (data) => {\n    dispatch(registration(data));\n  }\n    return (\n      <div className={css.container}>\n        <h1 className={css.title}>Register</h1>\n        <RegisterForm onSubmit={handleSignup} />\n      </div>\n    );\n}\n\nexport default RegisterPage;","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button_btn__tJ42D\"};","import css from \"../Button/button.module.css\";\n\nexport const Button = ({ children, type = \"submit\" }) => {\n    return <button type={type} className={css.btn}>{children}</button>\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"textField_block__dxOg3\",\"input\":\"textField_input__jNLH7\"};","import css from '../TextField/textField.module.css';\nimport { useMemo } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nexport const TextField = ({ label, handleChange, ...props }) => {\nconst id = useMemo(()=> nanoid(), [])\n\n    return (\n      <div className={css.block}>\n        <label htmlFor={id}>\n          {label}\n        </label>\n        <input\n          id={id}\n          onChange={handleChange}\n          {...props}\n          className={css.input}\n        />\n      </div>\n    );\n}","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from \"react\";\n\nexport const useForm = ({ initialState, onSubmit }) => {\n    const [state, setState] = useState({ ...initialState });\n\n    const handleChange = ({ target }) => {\n        setState(prevState => {\n            const { name, value, checked, type } = target;\n            const newValue = type === \"checkbox\" ? checked : value;\n\n            return {...prevState, [name]: newValue}\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({ ...state });\n        setState({ ...initialState });\n    }\n\n    return { state, setState, handleChange, handleSubmit }\n    \n}"],"names":["initialState","name","email","password","fields","type","required","label","placeholder","RegisterForm","onSubmit","useForm","state","handleChange","handleSubmit","className","css","TextField","value","Button","dispatch","useDispatch","data","registration","children","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","props","id","useMemo","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","onChange","useState","setState","prevState","checked","newValue","e","preventDefault"],"sourceRoot":""}