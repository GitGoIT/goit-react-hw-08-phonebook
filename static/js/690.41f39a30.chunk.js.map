{"version":3,"file":"static/js/690.41f39a30.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/contactsPage.module.css?6e18","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","redux/filter/filter-selectors.js","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"contactsPage_container__qArTW\",\"title\":\"contactsPage_title__yXES0\",\"text\":\"contactsPage_text__XE55r\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__qpJ1N\",\"block\":\"ContactForm_block__1h2W+\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import css from './/ContactForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const [state, setState] = useState({ ...initialState });\n\n\n  const dispatch = useDispatch();\n\n  const handleAddContact = ({ name, number }) => {\n    dispatch(addContact({ name, number }));\n  };\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleAddContact({ ...state });\n    setState({ ...initialState }); // reset function\n  };\n\n  const { name, number } = state;\n\n  return (\n    <form className={css.container} onSubmit={handleSubmit}>\n      <div className={css.block}>\n        <label htmlFor=\"\">Name</label>\n        <input\n          onChange={handleChange}\n          value={name}\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n        />\n      </div>\n      <div className={css.block}>\n        <label htmlFor=\"\">Number</label>\n        <input\n          onChange={handleChange}\n          value={number}\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter number\"\n        />\n      </div>\n      <button type=\"submit\" className={css.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"btn\":\"ContactList_btn__6Piat\"};","export const getAllContacts = state => state.contacts.items;\nexport const getFilteredContacts = ({ contacts, filter }) => {\n    if (!filter) {    // cheking if filter input is empty (false) then do nothing\n      return contacts.items;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.items.filter(({ name, number }) => {\n      return (\n        name.toLowerCase().includes(normalizedFilter) ||\n        number.toLowerCase().includes(normalizedFilter)\n      );\n    });\n    return result;\n};","import css from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\n\n\nexport const ContactList = () => {\n\nconst filteredContacts = useSelector(getFilteredContacts);\nconst dispatch = useDispatch();\n\nconst handleDeleteContact = id => {\n  dispatch(deleteContact(id));\n};\n\n  \n  const contact = filteredContacts.map(({ id, name, number }) => (\n    <li className={css.item} key={id}>\n      {name}: {number}\n      <button\n        onClick={() => handleDeleteContact(id)}\n        type=\"button\"\n        className={css.btn}\n      >\n        Delete\n      </button>\n    </li>\n  ));\n\n  return <ul className={css.list}>\n    {contact}\n  </ul>;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Filter_container__L5eml\",\"input\":\"Filter_input__N7T3z\"};","export const getFilter = ({ filter }) => filter;","import css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport { getFilter } from '../../redux/filter/filter-selectors';\n\n\nexport const Filter = () => {\n\n const filter = useSelector(getFilter);\n const dispatch = useDispatch();\n\nconst handleFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  return (\n    <div className={css.container}>\n      <label htmlFor=\"\">Find contact</label>\n      <input placeholder='Enter name or number'\n        value={filter}\n        name=\"filter\"\n        onChange={handleFilter}\n        type=\"text\"\n        className={css.input}\n      />\n    </div>\n  );\n};\n\n","import css from \"../ContactsPage/contactsPage.module.css\"\nimport { useEffect } from 'react';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllContacts, getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\n\nconst ContactsPage = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n  const allContacts = useSelector(getAllContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isFilteredContacts = Boolean(filteredContacts.length);\n  const isAllContacts = Boolean(allContacts.length);\n\n  return (\n    <div className={css.container}>\n      <h1 className={css.title}>Add contact</h1>\n      <ContactForm />\n      <h2 className={css.title}>Contacts</h2>\n      <Filter />\n      <>\n        {isFilteredContacts && <ContactList />}\n        {!isFilteredContacts && isAllContacts && (\n          <p className={css.text}>\n            There is no filtered result according your request.\n          </p>\n        )}\n        {!isAllContacts && (\n          <p className={css.text}>\n            Your contacts list is empty. Please add contact.\n          </p>\n        )}\n      </>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["initialState","name","number","ContactForm","useState","state","setState","dispatch","useDispatch","handleChange","target","value","prevState","className","css","onSubmit","e","preventDefault","addContact","handleAddContact","htmlFor","onChange","type","pattern","title","required","placeholder","getAllContacts","contacts","items","getFilteredContacts","filter","normalizedFilter","toLowerCase","includes","ContactList","filteredContacts","useSelector","contact","map","id","onClick","deleteContact","handleDeleteContact","getFilter","Filter","setFilter","allContacts","useEffect","fetchContacts","isFilteredContacts","Boolean","length","isAllContacts"],"sourceRoot":""}